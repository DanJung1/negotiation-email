// Note: This is a simplified version for demo purposes
// For production, you would use the actual Google Generative AI SDK

export class GeminiService {
  private apiKey: string;

  constructor() {
    // Get API key from localStorage or environment
    this.apiKey = typeof window !== 'undefined' 
      ? localStorage.getItem('gemini_api_key') || process.env.NEXT_PUBLIC_GEMINI_API_KEY || ''
      : process.env.NEXT_PUBLIC_GEMINI_API_KEY || '';
  }

  async analyzeEmail(email: any): Promise<any> {
    try {
      if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here' || this.apiKey === 'demo') {
        // Return mock analysis if no API key is provided
        return {
          sentiment: 'POSITIVE',
          priority: 'HIGH',
          category: 'BUSINESS',
          summary: 'This email contains important business information that requires attention.',
          keywords: ['business', 'proposal', 'meeting'],
          isNegotiation: false
        };
      }

      // Use AI to extract pricing information first
      const pricingAnalysis = await this.extractPricingInfo(email);

      // Real API call would go here
      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Analyze this email and provide:
              1. Sentiment (POSITIVE, NEUTRAL, NEGATIVE)
              2. Priority (LOW, NORMAL, HIGH, URGENT)
              3. Category (BUSINESS, PERSONAL, MARKETING, SUPPORT, etc.)
              4. Summary (2-3 sentences)
              5. Keywords (array of important terms)
              6. Is this a negotiation opportunity? (true/false)
              7. Extracted pricing information: ${JSON.stringify(pricingAnalysis)}

              Email Subject: ${email.subject}
              Email Body: ${email.body}
              From: ${email.from}

              Respond in JSON format.`
            }]
          }]
        })
      });

      const data = await response.json();
      const text = data.candidates[0].content.parts[0].text;
      return JSON.parse(text);
    } catch (error) {
      console.error('Gemini analysis failed:', error);
      // Return mock analysis on error
      return {
        sentiment: 'NEUTRAL',
        priority: 'NORMAL',
        category: 'GENERAL',
        summary: 'Email analysis unavailable.',
        keywords: [],
        isNegotiation: false
      };
    }
  }

  async generateSmartReply(email: any, context?: string): Promise<string> {
    try {
      if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here' || this.apiKey === 'demo') {
        // Return mock smart reply if no API key is provided
        return "This is a smart reply generated by AI.";
      }

      // Real API call would go here
      const response = await fetch('https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=' + this.apiKey, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Generate a professional email reply for this email:
              
              Subject: ${email.subject}
              From: ${email.from}
              Body: ${email.body}
              
              Context: ${context || 'General business communication'}
              
              Please provide a professional, contextually appropriate response.`
            }]
          }]
        })
      });

      const data = await response.json();
      const text = data.candidates[0].content.parts[0].text;
      return text;
    } catch (error) {
      console.error('Gemini smart reply generation failed:', error);
      return "I apologize, but I'm unable to generate a response at this time.";
    }
  }

  async generateNegotiationResponse(email: any, strategy: string, persona: string, targetPrice: number): Promise<string> {
    console.log('GeminiService: Generating negotiation response');
    console.log('API Key available:', !!this.apiKey);
    console.log('API Key value:', this.apiKey ? 'Set' : 'Not set');
    console.log('API Key starts with:', this.apiKey ? this.apiKey.substring(0, 10) + '...' : 'None');
    
    try {
      if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here' || this.apiKey === 'demo') {
        console.log('Using mock response - no valid API key');
        // Return mock negotiation response if no API key is provided
        return this.generateMockNegotiationResponse(email, strategy, persona, targetPrice);
      }

      console.log('Using REAL Gemini API for response generation');

      // Real API call for negotiation response
      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `You are an AI negotiation assistant. Generate a professional email response for this negotiation scenario:

              ORIGINAL EMAIL:
              Subject: ${email.subject}
              From: ${email.from}
              Body: ${email.body}
              
              NEGOTIATION CONTEXT:
              - Strategy: ${strategy}
              - AI Persona: ${persona}
              - Target Price: $${targetPrice}
              - Current Offer: $${email.currentOffer || 'Not specified'}
              - Negotiation Status: ${email.negotiationStatus || 'Initial contact'}
              
              INSTRUCTIONS:
              Generate a professional email response that:
              1. Acknowledges the other party's message
              2. Uses the ${strategy.toLowerCase()} negotiation strategy
              3. Maintains a ${persona.toLowerCase()} tone
              4. Works toward the target price of $${targetPrice}
              5. Is professional, respectful, and business-appropriate
              6. Includes specific value propositions or counter-offers where appropriate
              
              Format the response as a complete email that could be sent directly.`
            }]
          }]
        })
      });

      const data = await response.json();
      console.log('Gemini API Response:', data);
      
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        console.error('Invalid API response structure:', data);
        throw new Error('Invalid API response structure');
      }
      
      const text = data.candidates[0].content.parts[0].text;
      console.log('Generated AI response:', text.substring(0, 100) + '...');
      return text;
    } catch (error) {
      console.error('Gemini negotiation response generation failed:', error);
      return this.generateMockNegotiationResponse(email, strategy, persona, targetPrice);
    }
  }

  private generateMockNegotiationResponse(email: any, strategy: string, persona: string, targetPrice: number): string {
    console.log('Generating mock negotiation response');
    console.log('Email:', email?.subject);
    console.log('Strategy:', strategy, 'Persona:', persona, 'Target:', targetPrice);
    
    const strategies = {
      'COLLABORATIVE': 'I appreciate your interest and would like to find a solution that works for both of us.',
      'COMPETITIVE': 'I understand your position, but I need to ensure we reach a fair agreement.',
      'ACCOMMODATING': 'I value our relationship and want to work with you on this.'
    };

    const personas = {
      'FRIENDLY': 'I hope this message finds you well!',
      'FIRM': 'Thank you for your message.',
      'AGGRESSIVE': 'I need to be direct about our requirements.',
      'PROFESSIONAL': 'I appreciate your time and consideration.'
    };

    const baseResponse = `${personas[persona as keyof typeof personas] || personas.PROFESSIONAL}

${strategies[strategy as keyof typeof strategies] || strategies.COLLABORATIVE}

Based on your offer of $${email.currentOffer || 'the mentioned amount'}, I'd like to propose $${Math.round(targetPrice * 0.95)} as a starting point for our discussion. This reflects the market value while considering your specific needs.

I'm confident we can reach an agreement that benefits both parties. Would you be available for a brief call to discuss the details further?

Best regards,
AI Negotiation Assistant`;

    console.log('Generated mock response:', baseResponse.substring(0, 100) + '...');
    return baseResponse;
  }

  private async extractPricingInfo(email: any): Promise<any> {
    try {
      if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here' || this.apiKey === 'demo') {
        // Return mock pricing analysis
        return {
          hasPrice: true,
          askingPrice: 2200,
          offeredPrice: 1800,
          currency: 'USD',
          priceContext: 'MacBook Pro negotiation'
        };
      }

      const prompt = `Extract pricing information from this email. Look for:
1. Asking price (what the seller is asking for)
2. Offered price (what the buyer is offering)
3. Currency
4. Price context (what item/service is being negotiated)

Email Subject: ${email.subject}
Email Body: ${email.body}

Respond in JSON format with: hasPrice (boolean), askingPrice (number), offeredPrice (number or null), currency (string), priceContext (string).`;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`Pricing extraction failed: ${response.status}`);
      }

      const data = await response.json();
      const pricingText = data.candidates[0].content.parts[0].text;
      return JSON.parse(pricingText);
    } catch (error) {
      console.error('Pricing extraction failed:', error);
      return {
        hasPrice: false,
        askingPrice: null,
        offeredPrice: null,
        currency: 'USD',
        priceContext: 'Unknown'
      };
    }
  }
}